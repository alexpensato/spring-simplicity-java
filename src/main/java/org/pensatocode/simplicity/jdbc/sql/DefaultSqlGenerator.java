/*
 * Copyright 2017-2020 Alex Magalhaes <alex@pensatocode.org>
 * Copyright 2012-2014 Tomasz Nurkiewicz <nurkiewicz@gmail.com>.
 * Copyright 2016 Jakub Jirutka <jakub@jirutka.cz>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.pensatocode.simplicity.jdbc.sql;

import org.pensatocode.simplicity.jdbc.TableDescription;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;

import java.sql.DatabaseMetaData;
import java.sql.SQLException;
import java.util.List;
import java.util.StringJoiner;

import static java.lang.String.format;
import static org.pensatocode.simplicity.util.IterableUtil.toFormattedString;
import static org.pensatocode.simplicity.util.StringUtil.convertToSnakeCase;
import static org.pensatocode.simplicity.util.StringUtil.repeat;

/**
 * SQL Generator compatible with SQL:99.
 */
public class DefaultSqlGenerator implements SqlGenerator {

    static final String
        BLANK = "",
        AND = " AND ",
        OR = " OR ",
        COMMA = ", ",
        PARAM = "?",
        EQ_PARAM = " = ?";


    public boolean isCompatible(DatabaseMetaData metadata) throws SQLException {
        return true;
    }

    public String count(TableDescription table) {
        return format("SELECT count(*) FROM %s", table.getTableName());
    }

    public String deleteAll(TableDescription table) {
        return format("DELETE FROM %s", table.getTableName());
    }

    public String deleteByPK(TableDescription table) {
        return format("DELETE FROM %s WHERE %s",
            table.getTableName(),
            joinWithSuffix(EQ_PARAM, AND, table.getPkColumns()));
    }

    public String existsByPK(TableDescription table) {
        return format("SELECT 1 FROM %s WHERE %s",
            table.getTableName(),
            joinWithSuffix(EQ_PARAM, AND, table.getPkColumns()));
    }

    public String insert(TableDescription table, Boolean autoGeneratedKey) {
        StringBuilder sb = new StringBuilder();
        if (autoGeneratedKey) {
            sb
                .append("INSERT INTO ")
                .append(table.getTableName())
                .append(" (")
                .append(toFormattedString(table.getColumns()))
                .append(") VALUES (")
                .append(repeat(PARAM, COMMA, table.getColumns().size()))
                .append(")");
        } else {
            sb
                .append("INSERT INTO ")
                .append(table.getTableName())
                .append(" (")
                .append(toFormattedString(table.getPkColumns()))
                .append(COMMA)
                .append(toFormattedString(table.getColumns()))
                .append(") VALUES (")
                .append(repeat(PARAM, COMMA, table.getPkColumns().size() + table.getColumns().size()))
                .append(")");
        }
        return sb.toString();
    }

    public String selectAll(TableDescription table) {
        return format("SELECT %s FROM %s", table.getSelectClause(), table.getFromClause());
    }

    public String selectAll(TableDescription table, String whereClause) {
        return format("%s WHERE %s", selectAll(table), whereClause);
    }

    public String selectAll(TableDescription table, Pageable page) {
        return selectAll(table, BLANK, page);
    }

    public String selectAll(TableDescription table, String whereClause, Pageable page) {
        Sort sort = page.getSort().isSorted() ? page.getSort() : sortByPKs(table.getPkColumns());
        StringBuilder sb = new StringBuilder();
        sb
            .append("SELECT t2__.* FROM ( ")
            .append("SELECT row_number() OVER ( ")
            .append(orderByClause(sort))
            .append(" ) AS rn__, t1__.* ")
            .append("FROM ( ")
            .append(selectAll(table))
            .append(" ) t1__ ");
        if (!BLANK.equals(whereClause)) {
            sb
                .append("WHERE ")
                .append(whereClause);
        }
        sb
            .append(") t2__ WHERE t2__.rn__ BETWEEN ")
            .append(page.getOffset() + 1)
            .append(" AND ")
            .append(page.getOffset() + page.getPageSize());
        return sb.toString();
    }

    public String selectAll(TableDescription table, Sort sort) {
        return format("%S %S",selectAll(table), orderByClause(sort));
    }

    public String selectAll(TableDescription table, String whereClause, Sort sort) {
        return format("%S %S",selectAll(table, whereClause), orderByClause(sort));
    }

    public String selectByPK(TableDescription table) {
        return format("%s WHERE %s", selectAll(table), joinWithSuffix(EQ_PARAM, AND, table.getPkColumns()));
    }

    public String update(TableDescription table) {
        return format("UPDATE %s SET %s WHERE %s",
            table.getTableName(),
            joinWithSuffix(EQ_PARAM, COMMA, table.getColumns()),
            joinWithSuffix(EQ_PARAM, AND, table.getPkColumns()));
    }

    protected Sort sortByPKs(List<String> pks) {
        if (pks == null || pks.isEmpty()) {
            return Sort.unsorted();
        }
        String[] copy = new String[pks.size()];
        System.arraycopy(pks.toArray(), 0, (Object[])copy, 0, pks.size());
        return Sort.by(Direction.ASC, copy);
    }

    protected String orderByClause(Sort sort) {
        StringJoiner sj = new StringJoiner(COMMA, " ORDER BY ", BLANK);
        for(Order order: sort) {
            sj.add(format("%s %s", convertToSnakeCase(order.getProperty()), order.getDirection()));
        }
        return sj.toString();
    }

    protected String joinWithSuffix(String suffix, String delimiter, List<String> elements) {
        StringJoiner sj = new StringJoiner(suffix + delimiter, BLANK, suffix);
        for(String e: elements) {
            sj.add(e);
        }
        return sj.toString();
    }
}
